PARAMETERS packet,nzappolz
PUBLIC def_path,PATH_DATA,false,true
false=.f.
true=.t.
*
def_path=JUSTPATH(SYS(16))
SET default to (def_path)
IF VERSION(2)<>0
	packet='999999999'
ENDIF 
IF !TYPE('nzappolz')=='C'
	nzappolz=1 &&для отладки считываем первую запись из справочника пользователей
ELSE
	IF ALLTRIM(nzappolz)=='Y'
		nzappolz=-100
	ELSE  
		nzappolz=VAL(nzappolz)
	ENDIF 	
ENDIF 
IF !TYPE('packet')=='C'
	packet=''
ENDIF

DO case
	CASE VAL(packet)=1
		_screen.Caption='Самзастройщики - Просмотр и корректировка'
	CASE VAL(packet)=2
		_screen.Caption='Самзастройщики - Просмотр всех строящихся домов'
	CASE VAL(packet)=3
		_screen.Caption='Самзастройщики - Выходные формы'
	CASE VAL(packet)=4
		_screen.Caption='Самзастройщики - Запросный режим'
	CASE VAL(packet)=5
		_screen.Caption='Самзастройщики - Выдача напоминаний'	
ENDCASE 
  
CLOSE DATABASES ALL
CLOSE TABLES ALL
SET BELL OFF
SET PATH TO FORMS,reports,prg,menu,classes,bitmap,;
		..\general,..\general\vybgraf,..\general\msg,..\general\forms
SET PROCEDURE TO union,msg,prg2009,main,prg_general,class_vybgraf
SET CLASSLIB TO kvart,vklnd,thermometr,vybgraf,samclass
SET REPORTBEHAVIOR 80
*
=INIF_INIT(ADDBS(def_path)+'asurg.ini')
=PRSSET() &&Установка SET
=PRINIT()
ON KEY LABEL '"'
SET SYSMENU OFF 
SET CURSOR ON 
SET REPROCESS TO 1
*считываем путь к БД из ini-файла	
PUBLIC PATH_DATA,P_SPR,P_DAT,P_SAM,P_PRG,PUTI,P_156,P_157,P_SUBI,P_KRED	
LOCAL tmp_path		
tmp_path=INIF_READ('MAIN','PATH')
IF LEFT(tmp_path,5)=='ERROR'
	PATH_DATA=ADDBS(SUBSTR(def_path,1,RAT('\',def_path)-1))
ELSE
	PATH_DATA=ADDBS(tmp_path)
ENDIF 
P_157=PATH_DATA+'BD157\'
P_SPR=PATH_DATA+'SPRAV\'
P_DAT=PATH_DATA+'FOND\DATA\'&&путь к БД Н.М.
P_156=P_DAT
P_SAM=PATH_DATA+'SAM\BDSAM'
p_PRG=PATH_DATA
PUTI=PATH_DATA
P_SUBI=PATH_DATA+'SUBI\' &&путь к бд субсидии
P_KRED=PATH_DATA+'KRED\' &&путь к бд кредиты

IF VERSION(2)=0
	on error do samerror with ERROR(),PROGRAM(),LINENO(),MESSAGE(),MESSAGE(1)
ENDIF

*переменные для работы библиотеки kvart
PUBLIC rk5,rk6,robl,rab_prf
store '' to rk5,rk6,robl,rab_prf
*цвета и шрифт по умолчанию
PUBLIC color_err,color_act,kr_fontsize,kr_fontbold,color_info,color_yes
color_err=RGB(255,200,200) &&цвет для вывода сообщений об ошибках
color_act=RGB(150,250,230) &&цвет активного поля ввода
color_info=RGB(200,200,255) &&цвет для вывода информационных сообщений
color_yes=RGB(164,255,164)	&&цвет для вывода сообщениий об успешном завершении	
kr_fontsize=12 &&размер шрифта полей ввода
kr_fontbold=.t. &&жирность шрифта полей ввода
*подключение справки
IF FILE(ADDBS(def_path)+'asurg1_h.chm')
	SET HELP TO asurg1_h.chm
ENDIF 
*Определение размера основного окна
IF VERSION(2)=0
	IF SYSMETRIC(1)>800
		_screen.Width=960
		_screen.Height=710
		_screen.AutoCenter=.t.
	ELSE
		_screen.WindowState= 2
	ENDIF 
	_screen.Closable=.f.
ENDIF
_screen.Picture='asurg.bmp' 
_screen.Visible=.t.
_screen.Icon='samz.ico'
*
LOCAL loExc as Exception 
LOCAL lnErrTry
lnErrTry=0
TRY 
	PUBLIC adm_KOD,rik_NAIM,adm_NAIM
	USE (ADDBS(P_PRG)+'TKONSTU') IN 0 
	SELECT tkonstu
	GO top
	adm_KOD=val(FIO)      && код РАЙОHА=код АДМИHИСТРАЦИИ, в кот. работает комплекс
	IF adm_KOD=88            && признак ПРЕДПРИЯТИЯ
		*rik_NAIM=allt(NAIM)  
	 	*adm_NAIM=allt(NAMZ)   && наим-е ПРЕДПРИЯТИЯ
	ELSE
		USE (ADDBS(P_SPR)+'F0451') IN 0 
		SELECT F0451
		LOCATE FOR PREF=1.and.KOD=adm_KOD     && может не быть .cdx !!
		IF FOUND()
			rik_NAIM=ALLTRIM(nam)
			adm_NAIM=ALLTRIM(NAMZ)   && наим-е АДМИHИСТРАЦИИ
		ENDIF 	
	ENDIF 
	IF USED('tkonstu')
		USE IN tkonstu
	ENDIF 
	IF USED('f0451')
		USE IN f0451
	ENDIF 
	=_PRKONST()
	*считываем права пользователя
	PUBLIC POLZ_PRAVO,POLZ_IMA,POLZ_TEL,POLZ_DOLJ,POLZ_KOM
	POLZ_PRAVO=REPLICATE('0',20)
	POLZ_IMA=SYS(0)
	POLZ_TEL=''
	POLZ_DOLJ=''
	POLZ_KOM=''
	DO CASE 
		CASE nzappolz=-100
			POLZ_PRAVO=REPLICATE('1',20)
			POLZ_IMA='Программист'
			POLZ_TEL=''
			POLZ_DOLJ=''
			POLZ_KOM=''
		CASE nzappolz=0
			POLZ_PRAVO=REPLICATE('0',20)
			POLZ_IMA=SYS(0)
			POLZ_TEL=''
			POLZ_DOLJ=''
			POLZ_KOM=''
		OTHERWISE 
			IF FILE(ADDBS(PATH_DATA)+'F0POLZ.dbf')
				USE (ADDBS(PATH_DATA)+'F0POLZ') IN 0 AGAIN
				SELECT f0polz
				GO RECORD nzappolz
				POLZ_PRAVO=TRIM(pravo)
				POLZ_IMA=ALLTRIM(ima)
				POLZ_TEL=ALLTRIM(tel)
				POLZ_DOLJ=ALLTRIM(dolj)
				POLZ_KOM=ALLTRIM(STR(kom,10))
				USE IN f0polz
			ENDIF
	ENDCASE
CATCH TO loExc
	lnErrTry=1
	SAMERROR(loExc.ErrorNo,loExc.Procedure+' ('+PROGRAM()+')',;
		loExc.LineNo,loExc.Message,loExc.LineContents,'T')
ENDTRY 	  
IF lnErrTry=1
	MESSAGEBOX('База данных недоступна или испорчена',16,'Внимание')
	RETURN .f.
ENDIF 
*
LOCAL vozrt
*регистрация входа
vozrt=.t.
if FILE(ADDBS(path_data)+'f0vxod.dbf')
   TRY 
   	USE (ADDBS(path_data)+'f0vxod') IN 0
   	SELECT f0vxod
   CATCH TO loExc
   	vozrt=.f.
   	SAMERROR(loExc.ErrorNo,loExc.Procedure+' ('+PROGRAM()+')',;
   		loExc.LineNo,loExc.Message,loExc.LineContents,'T')
   ENDTRY 
   IF vozrt
      APPEND BLANK 
      =RLOCK()
      REPLACE IMP with POLZ_IMA
      IF EMPTY(IMP)
         REPLACE IMP WITH SYS(0)
      ENDIF 
      REPLACE VX WITH DATETIME(),vix WITH CTOT(''),name_k WITH _screen.caption
      FLUSH 
   ENDIF 
ELSE 
   vozrt=.f.
ENDIF 
if .not.vozrt
   =messagebox('Таблица регистрации входа отсутствует или испорчена.'+chr(13)+;
	'Обратитесь к администратору АСУРЖ-1.',16,'')
	_screen.Icon=''
	_screen.Picture=''
	_screen.caption='Microsoft Visual FoxPro'
	SET SYSMENU TO DEFAULT
	RETURN .f.
ENDIF
*таймер для принудительного выхода
_screen.AddObject('timer1','me_timer')
_screen.timer1.interval=15000
_screen.timer1.pth=PATH_DATA
*
=SETKEYRUS()
*переменная, определяющая место эксплуатации комплекса
PUBLIC gnRegion
gnRegion=3300
*переменная доступности иногороднего адреса
PUBLIC gnInAdress
gnInAdress=VAL(SUBSTR(nn_FUNC,7,1))
*переменная, определяющая комплекс
PUBLIC gcNameProject
gcNameProject='SAMZ'
*переменная определяющая поправку на размерность zadom (0 или 10000000)
PUBLIC gnCorrectZadom
gnCorrectZadom=0
*автоматический запуск режима напоминаний
IF VAL(packet)<>5
	=START_PROMPT()	 
ENDIF
*подсветка номера и даты сборки
PUBLIC gcVersionProject
=AGETFILEVERSION(laVers,'samz.exe')
IF TYPE('lavers(4)')=='C'
	gcVersionProject='samz.exe - сборка '+laVers(4)+' от '+TTOC(FDATE('samz.exe',1))
ELSE
	gcVersionProject='неизвестная сборка'
ENDIF 
_screen.AddObject('label1','label')
_screen.label1.top=29
_screen.label1.left=15
_screen.label1.AutoSize=.t.
_screen.label1.backstyle=0
_screen.label1.fontsize=9
_screen.label1.forecolor=RGB(155,155,155)
_screen.label1.caption=gcVersionProject
_screen.label1.visible=.t. 	
* 
*******
IF VERSION(2)=0
	DO case
		CASE VAL(packet)=1
			DO FORM sam_korr
		CASE VAL(packet)=2
			*DO FORM viewdom
		CASE VAL(packet)=3
			DO FORM vyhform
		CASE VAL(packet)=4
			DO FORM zapros
		CASE VAL(packet)=5
			DO FORM prompt
		CASE VAL(packet)=101067 AND nzappolz=-100
			_screen.Caption='Отладка АСУРЖ'
			DO mainmenu.mpr
			READ events		
	ENDCASE 
ELSE
	_screen.Caption='Отладка АСУРЖ'
	DO mainmenu.mpr
	READ events
ENDIF 	

IF USED('f0vxod')
	SELECT f0vxod
	replace vix WITH DATETIME()
	FLUSH 
	use in f0vxod
ENDIF
ON KEY LABEL '"'
_screen.RemoveObject('timer1') 
_screen.RemoveObject('label1')
_screen.Icon=''
_screen.Picture=''
_screen.caption='Microsoft Visual FoxPro'
SET SYSMENU TO DEFAULT
*SET HELP to
ON ERROR 
IF VERSION(2)=0
	quit
ENDIF 
RETURN 

*******************************************
*Процедура считывания констант*************
*******************************************
PROCEDURE _PRKONST
	LOCAL fluse,oldpoint
	oldpoint=SET("Point")
	SET POINT TO ','
	=PRKONST()
	=PRKONST(,ADDBS(P_SPR)+'f0konst')
	=PRKONSTF()
	SET POINT TO oldpoint
	IF USED('tkonstu')
		fluse=.f.
	ELSE
		fluse=.t.
		USE (ADDBS(p_PRG)+'TKONSTU') IN 0 again 
	ENDIF 
	SELECT tkonstu
	SCAN 
		IF UPPER(SUBSTR(rek,1,7))=='NN_UGSH'.and.pdata=='D'
	    	nn_IZMDATE=rek
	    ENDIF
	    IF UPPER(SUBSTR(rek,1,7))=='NN_UGSH'.and.pdata=='N'
	    	nn_IZMNISX=rek
	    ENDIF  
	ENDSCAN 
	IF fluse
		USE IN tkonstu
	ENDIF         
ENDPROC 


****           PRKONSTF           ****
PROCEDURE PRKONSTF
	*считываем отселяемые категории
	LOCAL if1,uu1,uu,uuu,uukat
	uu1=allt(str(sele()))
	if1=ADDBS(P_SPR)+'F0455'
	uuu=0
	SELECT 0
	if file(if1+'.DBF')
	IF USED('F0455')
		uuu=1
		SELECT f0455
		GO top
	ELSE 
		use &if1
	ENDIF 
	set orde to 2
	PUBLIC KAT_OTS
	KAT_OTS=''
	uukat=0
	DO WHILE .not.eof()
	  if uukat<>KKAT    
	    KAT_OTS=KAT_OTS+str(KKAT,2)+','    && отселяемые категории
	    uukat=KKAT
	  ENDIF 
	  SKIP 
	ENDDO  
	KAT_OTS=subs(KAT_OTS,1,len(KAT_OTS)-1)
	IF uuu=0
		USE IN f0455
	ENDIF 	
	ENDIF 
	select &uu1
RETURN

*************************************************************************
* SAMERROR																*
*************************************************************************
* Процедура обработки ошибок											*
*************************************************************************
* Принимаемые параметры: 							         			*
*	p1 (N) - номер ошибки												*
*	p2 (C) - имя программного модуля, в котором возникла ошибка			*
*	p3 (N) - номер строки, на которой возникла ошибка					*
*	p4 (C) - сообщение об ошибке										*
*	p5 (C)																*
*	tcVidErr (C) - вид фиксируемой ошибки (T - Try)						*
* Возвращаемое значение:                                     			*
*	информация об ошибке помещается в файл samerr.dbf					*
*************************************************************************
* Урбанович В.Г.									         			*
*************************************************************************
* ИЗМЕНЕНИЯ:															*
*	03.03.2011 (Урбанович В.Г.) - добавление более подробной информации	*
*		об ошибке														*
*	26.07.2011 (Урбанович В.Г.) - запрет занесения результата работы	*
*		комманд	LIST MEMORY и LIST STATUS в связи с чрезмерным 			*
*		увеличением размера файла samerr.fpt							*
*************************************************************************
PROCEDURE samerror
	lparameters p1,p2,p3,p4,p5,tcVidErr
	local imfer,sodd,nomerr,lnDefSelect,lcFileMem,lcFileStat
	lnDefSelect=SELECT()
	IF !TYPE('tcVidErr')=='C'
		tcVidErr=''
	ENDIF 
	sodd=''
	imfer=ADDBS(PATH_DATA)+'samerr.dbf'
	*lcFileMem=ADDBS(def_path)+'mem.txt'
	*lcFileStat=ADDBS(def_path)+'stat.txt'
	*DELETE FILE (lcFileMem)
	*DELETE FILE (lcFileStat)
	*LIST MEMORY TO (lcFileMem) NOCONSOLE 
	*LIST STATUS TO (lcFileStat) NOCONSOLE 
	if !file(imfer)
		create table (imfer) free (dattim t,;
								 coderr i,;
							 	soderr m,;
							 	cvid c(1),;
							 	cnamep c(25),;
							 	cnamec c(40),;
							 	memerr m,;
							 	staterr m)		 
		USE IN SELECT('samerr') 					 	
	ENDIF 
	use &imfer in 0 SHARED 
	sodd='Код ошибки: '+ALLTRIM(STR(p1))+CHR(13)+;
		'Модуль: '+p2+chr(13)+'Номер строки: '+alltrim(str(p3))+chr(13)+'Объяснение ошибки: '+p4+chr(13)+chr(13)+p5
	insert into samerr (dattim,coderr,soderr,cvid,cnamep,cnamec) values (datetime(),p1,sodd,tcVidErr,POLZ_IMA,SYS(0))
	*SELECT samerr
	*APPEND MEMO memerr FROM (lcFileMem)
	*APPEND MEMO staterr FROM (lcFileStat)
	USE IN SELECT('samerr')
	SELECT (lnDefSelect)
	IF p1=109
		MESSAGEBOX('Запись занята другим пользователем'+CHR(13)+;
					'В данный момент корректировка невозможна',48,'Внимание')
		IF tcVidErr<>'T'			
			RETURN TO MASTER 			
		ENDIF 	
	ENDIF
	IF EMPTY(tcVidErr) 
		IF MESSAGEBOX('Hомер ошибки '+str(p1,4)+chr(13)+'Объяснение ошибки: '+p4+chr(13)+;
		     'в программе '+p2+chr(13)+'в строке с номером '+str(p3,5)+chr(13)+p5,1+16,;
		     'недопустимое действие')=2
		    CLEAR EVENTS
		    QUIT  
		ELSE      
			RETURN
		ENDIF
	ENDIF 	 	
ENDPROC